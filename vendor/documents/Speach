О ЧЁМ. 
Итак, тема моего проекта звучит как "веб-сервис вопросов и ответов".
Почему именно такая тема? Почти у каждого ежедневно возникают некоторые вопросы, ответы на которые уже были даны на так называемых сервисах вопросов и ответов. На подобных сервисах большое количество повторяющихся пар вопросов и ответов. Для получения ответа на свой вопрос, необходимо его задать на подобном сервисе и ждать, пока другие участники на него ответят. В некоторых случаях ожидание может занимать несколько недель.
 
ЧТО РАЗРАБОТАНО. 
Разработанное приложение решает эту проблему и позволяет моментально получить ответ на заданный вопрос, при условии что на сервисе существует подобный отвеченный вопрос. Оно представляет собой веб-сервис. Скриншоты пользовательского интерфейса приведены на плакате. Приложение хранит вопросы и ответы и позволяет осуществлять поиск по ним.

КЛЮЧЕВЫЕ ОСОБЕННОСТИ
- Высокая скорость поиска возможных ответов. Она достигается за счет использования распределенного хранилища данных. Это отличает данное решение от других сервисов, на большей части которых вовсе нету поиска по подобным вопросам.
- Поддержка ролей пользователей. Присутствие ролей модератора и администратора позволяет владельцу приложения делегировать часть своих обязанностей по поддержанию приложения своей команде. Пользовательский интерфейс для управления ролями представлен на плакате.
- Возможность голосования за лучший ответ. На вопрос может быть дано большое количество ответов, но правильными будут только единицы из них. Поэтому важной особенностью является возможность выбрать лучший ответ. Учитываются голоса от автора. Данная информация используется и при поиске похожих ответов.

В основе веб-сервиса лежит Rails приложение, база данных MySQL и так называемое ключ-значение хранилище. Оно может работать как в режиме хранения данных в памяти, так и использовать стороннюю базу данных, например redis. В текущей конфигурации приложения используется несколько баз данных redis. При поиске вопроса происходит обращение к случайному хранилищу ключ-значение и производится чтение необходимых данных. Общая архитектура приложения представлена на плакате.

Рассмотрим основные алгоритмы, лежащие в основе веб-сервиса.
Рассмотрим алгоритм добавления вопроса, который показан на чертеже.
После нажатия пользователем кнопки отправки вопроса начинается процесс подготовки текста к хранению. Первым делом происходит удаление посторонних символов из вопроса, таких как точки, знаки вопроса и так далее. Затем вопрос нарезается на слова и для каждого слова выполняется подсчет хеш-суммы. Далее вопрос в исходном виде сохраняется в реляционную базу данных, после чего мы получаем уникальный идентификатор вопроса. Полученные хеш-суммы из предыдущего шага используются как ключи для хранилища ключ-значения. По данным ключам сохраняется идентификатор вопроса.

Рассмотрим поиск похожих вопросов, схема алгоритма продемонстрирована на чертеже.
Текст похожего вопроса очищается от знаков пунктуации и разбивается на слова. Далее каждое слово хешируется при помощи алгоритма MD5. Получены ключи от хранилища. Далее происходит выборка списка идентификаторов вопросов из хранилища. Данные идентификаторы группируются и выбирается большая группа. Мы получили идентификатор вопроса, по которому можно легко получить необходимый ответ из реляционной базы данных. 

На данный момент приложение доступно в сети интернет. Интерфейс приложения русский. Развернуто 1 приложение и 2 хранилища ключ-значения. Приложение спроектировано таким образом, что оно может масштабироваться до большого количества копий, в зависимости от требований к количеству запросов в секунду.

Приложение активно развивается и в нём исправляются выявляемые дефекты.
 
Таким образом проект могу назвать целесообразным и успешно выполненным.

